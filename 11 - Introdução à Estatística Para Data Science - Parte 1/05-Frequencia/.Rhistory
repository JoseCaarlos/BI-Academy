head(dataset$AGE)
# Cole ou digite aqui seu cÃ³digo de script:
library(ggplot2)
qplot(Valor, Custo, data=dataset, geom="point", main="Plot de Teste")
# Input load. Please do not change #
dataset<-read.csv('C:/Users/JOSE/REditorWrapper_83eb1190-3a2b-4519-8659-935ecbcbb069/input_df_01e44d8a-a8c1-45b0-a35d-07c6d778dc3c.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
# Original Script. Please update your script content here and once completed copy below section back to the original editing window #
# O
library(ggplot2)
head(dataset$AGE)
dataset <- readxl::read_excel("BI Academy/10 - Microsoft Power BI e Linguagem R/default of credit card clients.xls")
`dataset` <- readxl::read_excel("BI Academy/10 - Microsoft Power BI e Linguagem R/default of credit card clients.xls")
`dataset` = readxl::read_excel("BI Academy/10 - Microsoft Power BI e Linguagem R/default of credit card clients.xls")
str(dataset)
head(dataset$AGE)
head(dataset$X2)
`dataset` = readxl::read_excel("BI Academy/10 - Microsoft Power BI e Linguagem R/default of credit card clients.xls",)
`dataset` = readxl::read_excel("BI Academy/10 - Microsoft Power BI e Linguagem R/default of credit card clients.xls")
head(dataset$AGE)
dataset$AGE <- cut(dataset$AGE, c(0,30,50,100), labels=c("Jovem","Adulto", "Idoso"))
head(dataset$AGE)
head(dataset$SEX)
head(dataset$SEX)
dataset$SEX <- cut(dataset$AGE, c(0,1,2), labels=c("Masculino", "Feminino"))
head(dataset$SEX)
head(dataset$SEX)
dataset$SEX <- cut(dataset$AGE, c(0,1,2), labels=c("Masculino", "Feminino"))
head(dataset$SEX)
dataset$SEX <- cut(dataset$SEX, c(0,1,2), labels=c("Masculino", "Feminino"))
head(dataset$SEX)
head(dataset$EDUCATION)
head(dataset$SEX)
head(dataset$EDUCATION)
head(dataset$EDUCATION)
str(dataset)
unique(dataset$EDUCATION)
dataset$EDUCATION <- cut(dataset$EDUCATION, c(-1,0,1,2,3,4), labels = c("Pos Graduado", "Graduado", "Ensino Médio", "Outros"))
head(dataset$EDUCATION)
dataset$EDUCATION <- cut(dataset$EDUCATION, c(0,1,2,3,4), labels = c("Pos Graduado", "Graduado", "Ensino Médio", "Outros"))
head(dataset$EDUCATION)
unique(dataset$EDUCATION)
head(dataset$MARRIAGE)
unique(dataset$MARRIAGE)
dataset$MARRIAGE <- cut(dataset$MARRIAGE, c(-1,0,1,2,3), labels=c("Desconhecido", "Casado", "Solteiro", "outros"))
head(dataset$MARRIAGE)
unique(dataset$MARRIAGE)
dataset$MARRIAGE <- cut(dataset$MARRIAGE, c(-1,0,1,2,3), labels=c("Desconhecido", "Casado", "Solteiro", "Outros"))
dataset$MARRIAGE <- cut(dataset$MARRIAGE, c("outros"), labels=c("Outros"))
dataset$MARRIAGE['outros']
dataset$MARRIAGE
dataset$MARRIAGE
dataset$MARRIAGE[:9999]
View(dataset)
dataset$default.payment.next.month <- as.factor(dataset$default.payment.next.month)
dataset$default.payment.next.month <- as.factor(dataset$default.payment.next.month)
dataset$default.payment.next.month
dataset
# Alterando a variavel dependente para o tipo fator
dataset$`default payment next month` <- as.factor(dataset$`default payment next month`)
head(dataset$`default payment next month`)
str(dataset)
colnames(dataset)
colnames(dataset)[25]
colnames(dataset)[25] <- "inadimplente"
colnames(dataset)
sapply(dataset, function(x) sum(is.na(x)))
getwd()
install.packages("Amelia")
install.packages("caret")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
install.packages("randomForest")
library("Amelia")
missmap(dataset, main="Valores Missing Observados")
sapply(dataset, function(x) sum(is.na(x)))
dataset <- na.omit(dataset)
missmap(dataset, main="Valores Missing Observados")
dataset <- na.omit(dataset) # Remove as linhas com missing
dataset$ID <- NULL
table(dataset$inadimplente)
library("ggplot2")
qplot(x=inadimplente, data=dataset, geom="bar") + theme(axis.text.x = element_text(angle=90, hjust = 1))
TrainDataIndex = createDataPartition(dataset$inadimplente, p=0.45, list=FALSE)
TrainDataIndex
library("caret")
TrainDataIndex = createDataPartition(dataset$inadimplente, p=0.45, list=FALSE)
TrainDataIndex
trainData <- dataset[TrainDataIndex]
trainData <- dataset[TrainDataIndex,]
table(trainData$inadimplente)
prop.table(table(trainData$inadimplente))
nrow(trainData)
DistributionCompare <- cbind(prop.table(table(trainData$inadimplente)), prop.table(table(dataset$inadimplente)))
colnames(DistributionCompare) <- c("Treinamento", "Original")
DistributionCompare
library("dplyr")
meltefCOmp <- melt(DistributionCompare)
meltefCOmp
meltefComp <- melt(DistributionCompare)
library("dplyr")
library("reshape")
library("randomForest")
meltedComp <- melt(DistributionCompare)
meltedComp
ggplot(data=meltedComp, aes(x=X1, t=value)) + geom_bar( aes(fill = X2), stat = "identity", position = "dodge")
ggplot(data=meltedComp, aes(x=X1, y=value)) + geom_bar( aes(fill = X2), stat = "identity", position = "dodge")
testData <- dataset[-TrainDataIndex]
testData <- dataset[-TrainDataIndex,]
rf_model <- randomForest(inadimplente ~ ., data=trainData) #
rf_model
plot(rf_model, ylim = c(0, 0.36))
plot(rf_model, ylim = c(0, 0.36))
legend("topright", colnames(rf_model$err.rate), col=1:3, fill=1:3
plot(rf_model, ylim = c(0, 0.36))
legend("topright", colnames(rf_model$err.rate), col=1:3, fill=1:3)
legend("topright", colnames(rf_model$err.rate), col=1:3, fill=1:3)
plot(rf_model, ylim = c(0, 0.36))
legend("topright", colnames(rf_model$err.rate), col=1:3, fill=1:3)
varImpPlot(rf_model)
legend("topright", colnames(rf_model$err.rate), col=  1:3, fill=1:3)
legend("topright", colnames(rf_model$err.rate), col=  1:3, fill=1:3)
plot(rf_model, ylim = c(0, 0.36))
legend("topright", colnames(rf_model$err.rate), col=  1:3, fill=1:3)
rf_model
plot(rf_model, ylim = c(0, 0.36), main="RF_MODEL")
plot(rf_model, ylim = c(0, 0.36), main="RF_MODEL")
legend("topright", colnames(rf_model$err.rate), col=  1:3, fill=1:3)
plot(rf_model, ylim = c(0, 0.36), main="RF_MODEL")
legend("topright", colnames(rf_model$err.rate), col=  1:3, fill=1:3)
plot(rf_model, ylim = c(0, 0.36), main="RF_MODEL")
legend("topright", colnames(rf_model$err.rate), col=  1:3, fill=1:3)
plot(rf_model, ylim = c(0, 0.36), main="RF_MODEL")
legend("topright", colnames(rf_model$err.rate), col=  1:3, fill=1:3)
varImpPlot(rf_model)
dev.new(width = 550, height = 330, unit = "px")
plot(rf_model, ylim = c(0, 0.36), main="RF_MODEL")
legend("topright", colnames(rf_model$err.rate), col=1:3, fill=1:3)
dev.new(width = 550, height = 330, unit = "px")
plot(rf_model, ylim = c(0, 0.36), main="RF_MODEL")
legend("topright", colnames(rf_model$err.rate), col=1:3, fill=1:3)
varImpPlot(rf_model)
dev.new(width = 550, height = 330, unit = "px")
varImpPlot(rf_model)
dev.new(width = 550, height = 330, unit = "px")
varImpPlot(rf_model)
importance <- importance(rf_model)
varImportance <- data.frame(Variables= row.names(importance(), Importance = round(Importance[, 'MeanDecreaseGini'])))
importance <- importance(rf_model)
varImportance <- data.frame(variable.names(row.names(importance(), Importance = round(Importance[, 'MeanDecreaseGini']))))
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance(), Importance = round(Importance[, 'MeanDecreaseGini'],2)))
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance(), Importance = round(Importance[, 'MeanDecreaseGini'],2))
varImportance
importance <- importance(rf_model)
varImportance <- data.frame(Variables = row.names(importance), Importance = round(importance[ ,'MeanDecreaseGini'],2))
varImportance
dev.new(width = 550, height = 330, unit = "px")
varImpPlot(rf_model)
rankImportance <- varImportance %>% mutate(Rank=paste0('#', dense_rank(desc(Importance))))
rankImportance
ggplot(rankImportance, aes(x=reorder(Variables, importance), y = importance, fill=Importance)) +
geom_bar(stat="identity")+
geom_text(aes(x=Variables, y=0.5, label=Rank), hjust=0, vjust=0.55, size=4, colour='red') +
labs(x='Variables') +
coord_flip()
# Usando o ggplot2 para visualizar a importância relativa das variáveis
ggplot(rankImportance, aes(x=reorder(Variables, importance), y = importance, fill=Importance)) +
geom_bar(stat="identity") +
geom_text(aes(x=Variables, y=0.5, label=Rank), hjust=0, vjust=0.55, size=4, colour='red') +
labs(x="Variables") +
coord_flip()
# Previsões
prediction = predict(rf_model, testData)
cmrf <- confusionMatrix(predictionrf, testData$inadimplente, positive = "1")
cmrf
cmrf <- confusionMatrix(predictionrf, testData$inadimplente, positive = "1")
# Previsões
predictionrf = predict(rf_model, testData)
cmrf <- confusionMatrix(predictionrf, testData$inadimplente, positive = "1")
cmrf
cmrf <- confusionMatrix(predictionrf, testData$inadimplente, positive = "1")
install.packages("e1071")
library("e1071")
cmrf <- confusionMatrix(predictionrf, testData$inadimplente, positive = "1")
cmrf
setwd("~/BI Academy/11 - Introdução à Estatística Para Data Science - Parte 1/02-Medidas de posicao")
# Definindo a pasta de trabalho
setwd("~/BI Academy/11 - Introdução à Estatística Para Data Science - Parte 1/02-Medidasdeposicao")
setwd("~/BI Academy/11 - Introdução à Estatística Para Data Science - Parte 1/02-Medidasdeposicao")
setwd("~/BI Academy/11 - Introdução à Estatística Para Data Science - Parte 1/02-Medidas-Dispersao")
vendas <- read.csv("Vendas.csv", fileEncoding = "windows-1252")
var(vendas$Valor)
sd(vendas$Valor)
summary(vendas$Valor)
amostras <- read.csv("amostras.csv", fileEncoding = "windows-1252")
setwd("~/BI Academy/11 - Introdução à Estatística Para Data Science - Parte 1/03-Revisao1")
amostras <- read.csv("amostras.csv", fileEncoding = "windows-1252")
View(amostras)
amostras <- read.csv("amostras.csv", fileEncoding = "windows-1252")
str(amostras)
summary(amostras$AmostraA)
summary(amostras$AmostraB)
mean(amostras$AmostraA)
mean(amostras$AmostraB)
sd(amostras$AmostraA)
sd(amostras$AmostraB)
cvA <- sd(amostras$AmostraA) / mean(amostras$AmostraA) * 100
cvB <- sd(amostras$AmostraB) / mean(amostras$AmostraA) * 100
cvA
cvB
var(amostras$AmostraA)
var(amostras$AmostraB)
calculaModa <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
calculaModa(amostras$AmostraA)
calculaModa(amostras$AmostraB)
median(amostras$AmostraA)
median(amostras$AmostraB)
setwd("~/BI Academy/11 - Introdução à Estatística Para Data Science - Parte 1/04-Medidas-Posicao-Relativa")
setwd("~/BI Academy/11 - Introdução à Estatística Para Data Science - Parte 1/04-Medidas-Posicao-Relativa")
carros <- read.csv("carros.csv")
mean(carros$preco)
quantile(carros$preco)
quantile(carros$preco, probs = c(0.01, 0.99))
quantile(carros$preco, seq(from = 0, to = 1, by = 0.20))
IQR(carros$preco) # Diferença entre Q3 e Q1
range(carros$preco)
summary(carros$preco)
diff(range(carros$preco)
)
setwd("~/BI Academy/11 - Introdução à Estatística Para Data Science - Parte 1/05-Frequencia")
freq <- table(dados$grau_instrucao)
freq
freq <- table(dados$grau_instrucao)
dados <- read.table("usuarios.csv", dec = ".", sep = ",", h = T, fileEncoding = "windows-1252")
dados <- read.table("usuarios.csv", dec = ".", sep = ",", h = T, fileEncoding = "windows-1252")
dados <- read.table("usuarios.csv", dec = ".", sep = ",", h = T, fileEncoding = "windows-1252")
dados <- read.table("usuarios.csv", dec = ".", sep = ",", h = T, fileEncoding = "windows-1252")
freq <- table(dados$grau_instrucao)
freq
p_freq_rel
freq_rel <- prop.table(freq)
freq_rel
p_freq_rel <- 100 * prop.table(freq_rel)
p_freq_rel
freq <- c(freq, sum(freq))
freq_rel <- c(freq_rel, sum(freq_rel))
p_freq_rel <- c(p_freq_rel, sum(p_freq_rel))
names(freq)[4] <- "Total"
freq <- c(freq, sum(freq))
freq_rel <- c(freq_rel, sum(freq_rel))
p_freq_rel <- c(p_freq_rel, sum(p_freq_rel))
names(freq)[5] <- "Total"
tabela_final <- cbind(freq,
freq_rel = round(freq_rel, digits = 2),
p_freq_rel = round(p_freq_rel, digits = 2))
tabela_final
freq <- c(freq, sum(freq))
freq_rel <- c(freq_rel, sum(freq_rel))
p_freq_rel <- c(p_freq_rel, sum(p_freq_rel))
names(freq)[4] <- "Total"
tabela_final <- cbind(freq,
freq_rel = round(freq_rel, digits = 2),
p_freq_rel = round(p_freq_rel, digits = 2))
tabela_final
